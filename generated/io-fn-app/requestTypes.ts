// DO NOT EDIT THIS FILE
// This file has been generated by gen-api-models
// tslint:disable:max-union-size
// tslint:disable:no-identical-functions

import * as t from "io-ts";

import * as r from "italia-ts-commons/lib/requests";

import { PaginatedCreatedMessageWithoutContentCollection } from "./PaginatedCreatedMessageWithoutContentCollection";

import { ProblemJson } from "./ProblemJson";

import { MessageResponseWithContent } from "./MessageResponseWithContent";

import { PaginatedServiceTupleCollection } from "./PaginatedServiceTupleCollection";

import { ServicePublic } from "./ServicePublic";

import { ExtendedProfile } from "./ExtendedProfile";

import { NewProfile } from "./NewProfile";

import { Profile } from "./Profile";

import { UserDataProcessingChoiceRequest } from "./UserDataProcessingChoiceRequest";

import { UserDataProcessing } from "./UserDataProcessing";

/****************************************************************
 * getMessagesByUser
 */

// Request type definition
export type GetMessagesByUserT = r.IGetApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly paginationRequest?: string;
  },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, PaginatedCreatedMessageWithoutContentCollection>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, ProblemJson>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function getMessagesByUserDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
          200,
          type
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.ioResponseDecoder<
        404,
        typeof ProblemJson["_A"],
        typeof ProblemJson["_O"]
      >(404, ProblemJson)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getMessagesByUserDefaultDecoder = () =>
  getMessagesByUserDecoder(PaginatedCreatedMessageWithoutContentCollection);

/****************************************************************
 * getMessage
 */

// Request type definition
export type GetMessageT = r.IGetApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly id: string;
  },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, MessageResponseWithContent>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, ProblemJson>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function getMessageDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
          200,
          type
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.ioResponseDecoder<
        404,
        typeof ProblemJson["_A"],
        typeof ProblemJson["_O"]
      >(404, ProblemJson)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getMessageDefaultDecoder = () =>
  getMessageDecoder(MessageResponseWithContent);

/****************************************************************
 * getVisibleServices
 */

// Request type definition
export type GetVisibleServicesT = r.IGetApiRequestType<
  { readonly SubscriptionKey: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, PaginatedServiceTupleCollection>
  | r.IResponseType<401, undefined>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function getVisibleServicesDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(200, type),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getVisibleServicesDefaultDecoder = () =>
  getVisibleServicesDecoder(PaginatedServiceTupleCollection);

/****************************************************************
 * getService
 */

// Request type definition
export type GetServiceT = r.IGetApiRequestType<
  { readonly SubscriptionKey: string; readonly service_id: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, ServicePublic>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, undefined>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function getServiceDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
          200,
          type
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.constantResponseDecoder<undefined, 404>(404, undefined)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getServiceDefaultDecoder = () => getServiceDecoder(ServicePublic);

/****************************************************************
 * getProfile
 */

// Request type definition
export type GetProfileT = r.IGetApiRequestType<
  { readonly SubscriptionKey: string; readonly fiscalCode: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, ExtendedProfile>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, ProblemJson>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function getProfileDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
            200,
            type
          ),
          r.ioResponseDecoder<
            400,
            typeof ProblemJson["_A"],
            typeof ProblemJson["_O"]
          >(400, ProblemJson)
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.ioResponseDecoder<
        404,
        typeof ProblemJson["_A"],
        typeof ProblemJson["_O"]
      >(404, ProblemJson)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getProfileDefaultDecoder = () =>
  getProfileDecoder(ExtendedProfile);

/****************************************************************
 * createProfile
 */

// Request type definition
export type CreateProfileT = r.IPostApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly newProfile?: NewProfile;
  },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, ExtendedProfile>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<409, undefined>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function createProfileDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
            200,
            type
          ),
          r.ioResponseDecoder<
            400,
            typeof ProblemJson["_A"],
            typeof ProblemJson["_O"]
          >(400, ProblemJson)
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.constantResponseDecoder<undefined, 409>(409, undefined)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const createProfileDefaultDecoder = () =>
  createProfileDecoder(ExtendedProfile);

/****************************************************************
 * updateProfile
 */

// Request type definition
export type UpdateProfileT = r.IPutApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly profile?: Profile;
  },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, ExtendedProfile>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, undefined>
  | r.IResponseType<409, undefined>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function updateProfileDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.composeResponseDecoders(
            r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
              200,
              type
            ),
            r.ioResponseDecoder<
              400,
              typeof ProblemJson["_A"],
              typeof ProblemJson["_O"]
            >(400, ProblemJson)
          ),
          r.constantResponseDecoder<undefined, 401>(401, undefined)
        ),
        r.constantResponseDecoder<undefined, 404>(404, undefined)
      ),
      r.constantResponseDecoder<undefined, 409>(409, undefined)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const updateProfileDefaultDecoder = () =>
  updateProfileDecoder(ExtendedProfile);

/****************************************************************
 * startEmailValidationProcess
 */

// Request type definition
export type StartEmailValidationProcessT = r.IPostApiRequestType<
  { readonly SubscriptionKey: string; readonly fiscalCode: string },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<202, undefined>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, undefined>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function startEmailValidationProcessDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.ioResponseDecoder<202, typeof type["_A"], typeof type["_O"]>(
            202,
            type
          ),
          r.ioResponseDecoder<
            400,
            typeof ProblemJson["_A"],
            typeof ProblemJson["_O"]
          >(400, ProblemJson)
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.constantResponseDecoder<undefined, 404>(404, undefined)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const startEmailValidationProcessDefaultDecoder = () =>
  startEmailValidationProcessDecoder(t.undefined);

/****************************************************************
 * upsertUserDataProcessing
 */

// Request type definition
export type UpsertUserDataProcessingT = r.IPostApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly userDataProcessingChoiceRequest?: UserDataProcessingChoiceRequest;
  },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, UserDataProcessing>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<409, ProblemJson>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function upsertUserDataProcessingDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
            200,
            type
          ),
          r.ioResponseDecoder<
            400,
            typeof ProblemJson["_A"],
            typeof ProblemJson["_O"]
          >(400, ProblemJson)
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.ioResponseDecoder<
        409,
        typeof ProblemJson["_A"],
        typeof ProblemJson["_O"]
      >(409, ProblemJson)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const upsertUserDataProcessingDefaultDecoder = () =>
  upsertUserDataProcessingDecoder(UserDataProcessing);

/****************************************************************
 * getUserDataProcessing
 */

// Request type definition
export type GetUserDataProcessingT = r.IGetApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly userDataProcessingChoiceParam: string;
  },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, UserDataProcessing>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, ProblemJson>
  | r.IResponseType<429, undefined>
>;

// Decodes the success response with a custom success type
export function getUserDataProcessingDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.ioResponseDecoder<200, typeof type["_A"], typeof type["_O"]>(
            200,
            type
          ),
          r.ioResponseDecoder<
            400,
            typeof ProblemJson["_A"],
            typeof ProblemJson["_O"]
          >(400, ProblemJson)
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.ioResponseDecoder<
        404,
        typeof ProblemJson["_A"],
        typeof ProblemJson["_O"]
      >(404, ProblemJson)
    ),
    r.constantResponseDecoder<undefined, 429>(429, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getUserDataProcessingDefaultDecoder = () =>
  getUserDataProcessingDecoder(UserDataProcessing);
